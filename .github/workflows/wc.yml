name: CI/CD Pipeline with TLS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: srirammanyam/wisecow:latest

  deploy-to-kubernetes:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Kind Cluster
        uses: helm/kind-action@v1.4.0
        with:
          wait: 120s

      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      - name: Verify cluster status
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Deploy NGINX Ingress Controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/kind/deploy.yaml

      - name: Deploy Cert-Manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.0/cert-manager.yaml

      - name: Wait for NGINX & Cert-Manager to be ready
        run: |
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=300s
          kubectl wait --namespace cert-manager \
            --for=condition=ready pod \
            --all \
            --timeout=300s

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f deployment.yml
          kubectl apply -f service.yml
          kubectl apply -f cluster-issuer.yml
          kubectl apply -f ingress.yml

